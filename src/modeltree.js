import * as THREE from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import * as dat from 'dat.gui';
/* import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';
 */
class modeltree {
  constructor(obj) {
    this.name = obj.name;
    this.file = obj.file;
    this.scene = obj.scene;
    this.scale = obj.scale || 1;

    this.loader = new GLTFLoader();
 /*    const dracoLoader = new DRACOLoader();
    dracoLoader.setDecoderPath('./draco/');
    this.loader.setDRACOLoader(dracoLoader); */

    this.init();
  }

  init() {
    this.loader.load(this.file, (gltf) => {
        this.model = gltf.scene;
      
        // üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ‚Äî —É–±–∏—Ä–∞–µ–º –±–ª–µ—Å–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —à–µ—Ä—à–∞–≤–æ—Å—Ç—å
        this.model.traverse((child) => {
          if (child.isMesh && child.material) {
            child.material.roughness = 1.0;      // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–µ—Ä—à–∞–≤–æ—Å—Ç—å
            child.material.metalness = 0.0;      // –±–µ–∑ –±–ª–µ—Å–∫–∞
            child.material.envMapIntensity = 0;  // –æ—Ç–∫–ª—é—á–∏—Ç—å –≤–ª–∏—è–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            child.material.needsUpdate = true;
          }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º—è–≥–∫–∏–π –ø—Ä–∏–≥–ª—É—à—ë–Ω–Ω—ã–π —Å–≤–µ—Ç –∫ –¥–∞–º–æ—á–∫–µ
        const softLight = new THREE.DirectionalLight(0xffddcc, -3.0); // —Ç—ë–ø–ª—ã–π –∏ —Å–ª–∞–±—ã–π
        softLight.position.set(1, 1, 1);
        this.model.add(softLight);

        const softSpot = new THREE.SpotLight(0xccccff, 0.5);
softSpot.angle = Math.PI / 2;
softSpot.penumbra = 0.8;
softSpot.decay = 2;
softSpot.distance = 3;
softSpot.position.set(-1, -2, 2);
softSpot.target.position.set(0, 0.5, 0);

this.model.add(softSpot);
this.model.add(softSpot.target);

const gui = new dat.GUI();

const folder = gui.addFolder('Luna Soft Spot');

folder.add(softSpot.position, 'x', -10, 10).name('X Position');
folder.add(softSpot.position, 'y', -10, 10).name('Y Position');
folder.add(softSpot.position, 'z', -10, 10).name('Z Position');

folder.add(softSpot.target.position, 'x', -10, 10).name('Target X');
folder.add(softSpot.target.position, 'y', -10, 10).name('Target Y');
folder.add(softSpot.target.position, 'z', -10, 10).name('Target Z');

folder.add(softSpot, 'intensity', 0, 5).name('Intensity');
folder.add(softSpot, 'angle', 0, Math.PI / 2).name('Angle');
folder.add(softSpot, 'penumbra', 0, 1).name('Penumbra');

folder.open();



        const fillLight = new THREE.AmbientLight(0x404040, -3.0); // –æ–±—â–∏–π —Å–≤–µ—Ç
        this.model.add(fillLight);

        
        
      
        this.model.scale.set(this.scale, this.scale, this.scale);
        this.model.position.set(0, 0, 0);
        this.scene.add(this.model);

        // === –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–º–æ—á–∫—É –Ω–∞ –ø–∞—Ä—Ç–∏–∫—É–ª—ã ===
        let firstMesh = null;

        this.model.traverse((child) => {
          if (child.isMesh && !firstMesh) {
            firstMesh = child;
          }
        });

        if (firstMesh) {
          const geometry = firstMesh.geometry.clone();
          const material = new THREE.PointsMaterial({
            color: 0xffffff,
            size: 0.01,
            sizeAttenuation: true
          });

          const points = new THREE.Points(geometry, material);

          // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—É –∂–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–æ –ø–æ–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ
          points.position.copy(this.model.position);
          points.scale.copy(this.model.scale);
          points.rotation.copy(this.model.rotation);

          // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞–∫–ª–æ–Ω –ø–æ –æ—Å–∏ X (–¥–∞–º–æ—á–∫–∞ —Å—Ç–æ—è)
          points.rotation.x += Math.PI / 2;

          this.scene.add(points);
          this.model.visible = false; // —Å–∫—Ä—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
        }
      });
  }
}

export default modeltree;